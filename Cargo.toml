# You must change these to your own details.
[package]
name = "chrono-parse-rfc3339"
description = "nodejs microsecond date parser"
version = "0.1.1"
authors = ["Lorenzo Mangani <lorenzo.mangani@gmail.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2018"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true
opt-level = 3

[profile.dev]
lto = true
opt-level = 3

[features]
# default = ["wee_alloc"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "=0.2.61"
js-sys = "0.3"
chrono = { version = "0.4", features = ["wasmbind", "js-sys"] }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
# wee_alloc = { version = "0.4", optional = true }

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
#[dependencies.web-sys]
#version = "0.3"
#features = ["console"]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
#[target."cfg(debug_assertions)".dependencies]
#console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.2"
futures = "0.1"
wasm-bindgen-futures = "0.3"
